"use strict";(self["webpackChunkcpp_book"]=self["webpackChunkcpp_book"]||[]).push([[361],{1361:function(t,s,a){a.r(s),a.d(s,{default:function(){return p}});var e=function(){var t=this;t._self._c;return t._m(0)},i=[function(){var t=this,s=t._self._c;return s("div",[s("h1",{staticStyle:{"text-align":"center"}},[t._v(" 第七章 面向对象 ")]),s("div",{staticClass:"lake-content",attrs:{typography:"classic"}},[s("h1",{attrs:{id:"EoYNR"}},[s("span",{staticClass:"ne-text"},[t._v(" 1. 类和对象 ")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-align":"center"},attrs:{id:"u534bb75a"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 表7.1 ")]),s("span",{staticClass:"ne-text"},[t._v(" NBA2022年东部赛区统计数据 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"621px","text-align":"center"},attrs:{border:"1",id:"uxvRe",align:"center"}},[s("tbody",[s("tr",{staticStyle:{height:"22px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ud297c60b"}},[s("span",{staticClass:"ne-text"},[t._v(" 排名 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u748e91e0"}},[s("span",{staticClass:"ne-text"},[t._v(" 球队 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf03c6b92"}},[s("span",{staticClass:"ne-text"},[t._v(" 胜 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"u50637a1e"}},[s("span",{staticClass:"ne-text"},[t._v(" 负 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u95283c89"}},[s("span",{staticClass:"ne-text"},[t._v(" 胜率 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u8dd27e93"}},[s("span",{staticClass:"ne-text"},[t._v(" 得分 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"u45ffde83"}},[s("span",{staticClass:"ne-text"},[t._v(" 失分 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"u271cd988"}},[s("span",{staticClass:"ne-text"},[t._v(" 分差 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u6db9a204"}},[s("span",{staticClass:"ne-text"},[t._v(" 1 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接28"}},[s("span",{staticClass:"ne-text"},[t._v(" 热火 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"udd3fa8c5"}},[s("span",{staticClass:"ne-text"},[t._v(" 53 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua3d1e05b"}},[s("span",{staticClass:"ne-text"},[t._v(" 29 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"udecda990"}},[s("span",{staticClass:"ne-text"},[t._v(" 64.60% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u8bd008ed"}},[s("span",{staticClass:"ne-text"},[t._v(" 110.02 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua8a2d419"}},[s("span",{staticClass:"ne-text"},[t._v(" 105.57 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"uaa7d58ae"}},[s("span",{staticClass:"ne-text"},[t._v(" 4.45 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"uefee7b59"}},[s("span",{staticClass:"ne-text"},[t._v(" 2 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u9919c8ac"}},[s("span",{staticClass:"ne-text"},[t._v(" 凯尔特人 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u1e05d784"}},[s("span",{staticClass:"ne-text"},[t._v(" 51 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"u06dfc38b"}},[s("span",{staticClass:"ne-text"},[t._v(" 31 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u80bfe5dd"}},[s("span",{staticClass:"ne-text"},[t._v(" 62.20% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u3e7f884c"}},[s("span",{staticClass:"ne-text"},[t._v(" 111.76 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"u2aa13f0f"}},[s("span",{staticClass:"ne-text"},[t._v(" 104.48 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"ufdee0e85"}},[s("span",{staticClass:"ne-text"},[t._v(" 7.28 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u57e482a7"}},[s("span",{staticClass:"ne-text"},[t._v(" 3 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u0e20b7aa"}},[s("span",{staticClass:"ne-text"},[t._v(" 雄鹿 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua70a7dbb"}},[s("span",{staticClass:"ne-text"},[t._v(" 51 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua95808bf"}},[s("span",{staticClass:"ne-text"},[t._v(" 31 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u5492e4aa"}},[s("span",{staticClass:"ne-text"},[t._v(" 62.20% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接d5"}},[s("span",{staticClass:"ne-text"},[t._v(" 115.49 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"u3e43ae14"}},[s("span",{staticClass:"ne-text"},[t._v(" 112.13 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"u58c8819a"}},[s("span",{staticClass:"ne-text"},[t._v(" 3.35 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"uee2fcf45"}},[s("span",{staticClass:"ne-text"},[t._v(" 4 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u1366d8f9"}},[s("span",{staticClass:"ne-text"},[t._v(" 76人 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4284f6c2"}},[s("span",{staticClass:"ne-text"},[t._v(" 51 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接15"}},[s("span",{staticClass:"ne-text"},[t._v(" 31 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub4ba20ce"}},[s("span",{staticClass:"ne-text"},[t._v(" 62.20% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ucb6ca74e"}},[s("span",{staticClass:"ne-text"},[t._v(" 109.94 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"uefe8aa76"}},[s("span",{staticClass:"ne-text"},[t._v(" 107.33 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"uba5f0913"}},[s("span",{staticClass:"ne-text"},[t._v(" 2.61 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u1915b11a"}},[s("span",{staticClass:"ne-text"},[t._v(" 5 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub2b6ac0f"}},[s("span",{staticClass:"ne-text"},[t._v(" 猛龙 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u00a39545"}},[s("span",{staticClass:"ne-text"},[t._v(" 48 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"udac73943"}},[s("span",{staticClass:"ne-text"},[t._v(" 34 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u83833e78"}},[s("span",{staticClass:"ne-text"},[t._v(" 58.50% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ucb0c96f1"}},[s("span",{staticClass:"ne-text"},[t._v(" 109.39 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"udf17f725"}},[s("span",{staticClass:"ne-text"},[t._v(" 107.1 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"u742e15c5"}},[s("span",{staticClass:"ne-text"},[t._v(" 2.29 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u2056e42c"}},[s("span",{staticClass:"ne-text"},[t._v(" 6 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u0e9d058f"}},[s("span",{staticClass:"ne-text"},[t._v(" 公牛 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u364bf118"}},[s("span",{staticClass:"ne-text"},[t._v(" 46 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"ucf3f38cf"}},[s("span",{staticClass:"ne-text"},[t._v(" 36 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接d3"}},[s("span",{staticClass:"ne-text"},[t._v(" 56.10% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u8932f849"}},[s("span",{staticClass:"ne-text"},[t._v(" 111.61 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"uff085244"}},[s("span",{staticClass:"ne-text"},[t._v(" 112 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"uae9e4b01"}},[s("span",{staticClass:"ne-text"},[t._v(" -0.39 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"udf7a99be"}},[s("span",{staticClass:"ne-text"},[t._v(" 7 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4e0429cb"}},[s("span",{staticClass:"ne-text"},[t._v(" 篮网 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u6b75df0e"}},[s("span",{staticClass:"ne-text"},[t._v(" 44 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4f8c878a"}},[s("span",{staticClass:"ne-text"},[t._v(" 38 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"uc234f35c"}},[s("span",{staticClass:"ne-text"},[t._v(" 53.70% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u2a4510f1"}},[s("span",{staticClass:"ne-text"},[t._v(" 112.9 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"u27368c19"}},[s("span",{staticClass:"ne-text"},[t._v(" 112.12 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"u367ef784"}},[s("span",{staticClass:"ne-text"},[t._v(" 0.78 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"uedf68102"}},[s("span",{staticClass:"ne-text"},[t._v(" 8 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf6c9497d"}},[s("span",{staticClass:"ne-text"},[t._v(" 老鹰 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"uc41db2dc"}},[s("span",{staticClass:"ne-text"},[t._v(" 43 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua1d4b47e"}},[s("span",{staticClass:"ne-text"},[t._v(" 39 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"udff77364"}},[s("span",{staticClass:"ne-text"},[t._v(" 52.40% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ud787b97a"}},[s("span",{staticClass:"ne-text"},[t._v(" 113.94 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"u67a28a6c"}},[s("span",{staticClass:"ne-text"},[t._v(" 112.38 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"ubf4cb59b"}},[s("span",{staticClass:"ne-text"},[t._v(" 1.56 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ud769cc36"}},[s("span",{staticClass:"ne-text"},[t._v(" 9 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u9f816243"}},[s("span",{staticClass:"ne-text"},[t._v(" 骑士 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u1416b806"}},[s("span",{staticClass:"ne-text"},[t._v(" 44 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"u62dd269d"}},[s("span",{staticClass:"ne-text"},[t._v(" 38 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u3fe03c56"}},[s("span",{staticClass:"ne-text"},[t._v(" 53.70% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ud0c828ad"}},[s("span",{staticClass:"ne-text"},[t._v(" 107.79 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"u0898cf2b"}},[s("span",{staticClass:"ne-text"},[t._v(" 105.67 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接2f"}},[s("span",{staticClass:"ne-text"},[t._v(" 2.12 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u329a3dec"}},[s("span",{staticClass:"ne-text"},[t._v(" 10 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u447ce798"}},[s("span",{staticClass:"ne-text"},[t._v(" 黄蜂 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u5ba11f25"}},[s("span",{staticClass:"ne-text"},[t._v(" 43 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"u8f2fab5c"}},[s("span",{staticClass:"ne-text"},[t._v(" 39 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u59d334b3"}},[s("span",{staticClass:"ne-text"},[t._v(" 52.40% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u61e6db2b"}},[s("span",{staticClass:"ne-text"},[t._v(" 115.33 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"ubaf01b85"}},[s("span",{staticClass:"ne-text"},[t._v(" 114.89 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"u254ed952"}},[s("span",{staticClass:"ne-text"},[t._v(" 0.44 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u84d7eece"}},[s("span",{staticClass:"ne-text"},[t._v(" 11 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接e3"}},[s("span",{staticClass:"ne-text"},[t._v(" 尼克斯 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ube8137ed"}},[s("span",{staticClass:"ne-text"},[t._v(" 37 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"u40f3507b"}},[s("span",{staticClass:"ne-text"},[t._v(" 45 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u3baff5bf"}},[s("span",{staticClass:"ne-text"},[t._v(" 45.10% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u2878b370"}},[s("span",{staticClass:"ne-text"},[t._v(" 106.48 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"u7f096c63"}},[s("span",{staticClass:"ne-text"},[t._v(" 106.6 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"u6b94fd3f"}},[s("span",{staticClass:"ne-text"},[t._v(" -0.12 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf652fad7"}},[s("span",{staticClass:"ne-text"},[t._v(" 12 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4f5713eb"}},[s("span",{staticClass:"ne-text"},[t._v(" 奇才 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua4018eca"}},[s("span",{staticClass:"ne-text"},[t._v(" 35 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"u1c48454b"}},[s("span",{staticClass:"ne-text"},[t._v(" 47 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub095307d"}},[s("span",{staticClass:"ne-text"},[t._v(" 42.70% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua447de9c"}},[s("span",{staticClass:"ne-text"},[t._v(" 108.62 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf0d0286b"}},[s("span",{staticClass:"ne-text"},[t._v(" 112 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"u3f866e77"}},[s("span",{staticClass:"ne-text"},[t._v(" -3.38 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u776b5be0"}},[s("span",{staticClass:"ne-text"},[t._v(" 13 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u6abb71da"}},[s("span",{staticClass:"ne-text"},[t._v(" 步行者 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u76098fea"}},[s("span",{staticClass:"ne-text"},[t._v(" 25 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"ufc1b0d93"}},[s("span",{staticClass:"ne-text"},[t._v(" 57 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接b0"}},[s("span",{staticClass:"ne-text"},[t._v(" 30.50% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"uc6250121"}},[s("span",{staticClass:"ne-text"},[t._v(" 111.46 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"u7c4436dd"}},[s("span",{staticClass:"ne-text"},[t._v(" 114.94 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接69"}},[s("span",{staticClass:"ne-text"},[t._v(" -3.48 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u76ae0d05"}},[s("span",{staticClass:"ne-text"},[t._v(" 14 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u347b2cf7"}},[s("span",{staticClass:"ne-text"},[t._v(" 活塞 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u5a798ab0"}},[s("span",{staticClass:"ne-text"},[t._v(" 23 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"u0b3b6efe"}},[s("span",{staticClass:"ne-text"},[t._v(" 59 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf536f9c2"}},[s("span",{staticClass:"ne-text"},[t._v(" 28.00% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u02404a50"}},[s("span",{staticClass:"ne-text"},[t._v(" 104.83 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"u2fdbc68a"}},[s("span",{staticClass:"ne-text"},[t._v(" 112.55 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"u9e25c43d"}},[s("span",{staticClass:"ne-text"},[t._v(" -7.72 ")])])])]),s("tr",{staticStyle:{height:"24px"}},[s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u943c30c7"}},[s("span",{staticClass:"ne-text"},[t._v(" 15 ")])])]),s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"uad69ed85"}},[s("span",{staticClass:"ne-text"},[t._v(" 魔术 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub65587b9"}},[s("span",{staticClass:"ne-text"},[t._v(" 22 ")])])]),s("td",{attrs:{width:"63"}},[s("p",{staticClass:"ne-p",attrs:{id:"u480c9c4d"}},[s("span",{staticClass:"ne-text"},[t._v(" 60 ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua509a1b8"}},[s("span",{staticClass:"ne-text"},[t._v(" 26.80% ")])])]),s("td",{attrs:{width:"72"}},[s("p",{staticClass:"ne-p",attrs:{id:"u6ae75ade"}},[s("span",{staticClass:"ne-text"},[t._v(" 104.23 ")])])]),s("td",{attrs:{width:"86"}},[s("p",{staticClass:"ne-p",attrs:{id:"ue1e371d3"}},[s("span",{staticClass:"ne-text"},[t._v(" 112.23 ")])])]),s("td",{attrs:{width:"77"}},[s("p",{staticClass:"ne-p",attrs:{id:"uae46a6fa"}},[s("span",{staticClass:"ne-text"},[t._v(" -8 ")])])])])])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"uf4cfe859"}},[s("span",{staticClass:"ne-text"},[t._v(" 表7.1 是NBA2022年东部赛区的一些统计数据。如果需要存储这些数据，可以每列建一个数组，因为只有一列的数据类型才是相同的。但是经过仔细观察可以发现，一行数据才是构成一个球队的整体，每列都是这个球队的一个属性，C++中可以通过“类”或“结构体”封装具有不同数据类型多个属性的数据。结构体是C语言中提供的复合数据类型，因为类包含了结构体中的所有功能，因此只需要掌握类的使用方法即可。以下为构造类的具体代码实现： ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"udRkN"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.1")]),t._v("类与对象样例\n "),s("code",[t._v("#include <iostream>\nusing namespace std;\nclass Team {\npublic:\n    string name;\n    int win, lose;\n    double points, opoints;\n    Team(const string &n, int w, int l, double p, double op) {\n        name = n;\n        win = w;\n        lose = l;\n        points = p;\n        opoints = op;\n    }\n    double rate() {\n        return win / double(win + lose);\n    }\n    double gap() {\n        return points - opoints;\n    }\n};\nint main()\n{\n    Team t1 = Team(\"Heat\", 53, 29, 110.02, 105.57);\n    Team t2 = Team(\"Bulls\", 46, 36, 111.61, 112);\n    cout << t1.name << '\\t' << t1.rate() << '\\t' << t1.gap() << endl;\n    cout << t2.name << '\\t' << t2.rate() << '\\t' << t2.gap() << endl;\n    return 0;\n}")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"wRUSk"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接5a"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输入 ")])])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4c7577d4"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输出 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u20f4d4ad"}},[s("span",{staticClass:"ne-text"},[t._v(" （无） ")])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接23"}},[s("span",{staticClass:"ne-text"},[t._v(" Heat 0.646341 4.45 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u8d677e9a"}},[s("span",{staticClass:"ne-text"},[t._v(" Bulls 0.560976 -0.399 ")])])])])])]),s("ul",{staticClass:"ne-ul"},[s("li",{attrs:{id:"u8e1e577e"}},[s("span",{staticClass:"ne-text"},[t._v(" 第3-21行构造了一个新的类 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" Team ")])]),s("span",{staticClass:"ne-text"},[t._v(" ，从编程的角度讲，一个类相当于一个新的数据类型，其具体使用方法与数据类型的调用完全相同。第3行的 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" Team ")])]),s("span",{staticClass:"ne-text"},[t._v(" 是类的名称，即新数据类型的名称。第24-25行用新的类构造了两个变量 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" t1 ")])]),s("span",{staticClass:"ne-text"},[t._v(" 和 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" t2 ")])]),s("span",{staticClass:"ne-text"},[t._v(" ，也称为对象。类是抽象概念，表示一种类别，包含特定的属性和方法；对象是通过类实例化出一个带有具体数据的变量。例如对象 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" t1 ")])]),s("span",{staticClass:"ne-text"},[t._v(" 包含了热队的数据，对象 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" t2 ")])]),s("span",{staticClass:"ne-text"},[t._v(" 包含了公牛队的数据。用同一个类构造的多个对象具有相同的行为，但是数据相互独立。 ")])]),s("li",{attrs:{id:"uc49da888"}},[s("span",{staticClass:"ne-text"},[t._v(" 第5-7行定义了5个属性，这些属性可以是各种数据类型。属性是一个类的数据成员。属性可以被类内的所有函数进行访问。 ")])]),s("li",{attrs:{id:"u08b01562"}},[s("span",{staticClass:"ne-text"},[t._v(" 第15-20行定义了两个函数，属于一个类的函数称为这个类的成员函数，表示这个类所能执行的行为。 ")])]),s("li",{attrs:{id:"u4c49e3aa"}},[s("span",{staticClass:"ne-text"},[t._v(" 一个类的属性或行为可以通过运算符 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" . ")])]),s("span",{staticClass:"ne-text"},[t._v(" 进行调用，如第26-27行所示。 ")])]),s("li",{attrs:{id:"u6771b374"}},[s("span",{staticClass:"ne-text"},[t._v(" 第8-14行定义了一个跟类同名的函数，称为构造函数。它在对象被定义时进行自动调用，如第24-25行所示。构造函数且没有函数返回值，参数列表可以由用户自行指定，根据参数列表的不同，可以构造多个构造函数。如果用户没有显式定义构造函数，将会自动构建一个无参的缺省构造函数。 ")])])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u1dbc9555"}},[s("span",{staticClass:"ne-text"},[t._v(" 以对象为基础进行程序设计，叫做面向对象编程。C++是面向对象语言，但是因为对C的兼容，并不是纯粹的面向对象语言，但是JAVA和Python都是纯面向对象语言，在纯面向对象语言中，一切都是对象。 ")])]),s("h3",{attrs:{id:"ZvJ3S"}},[s("span",{staticClass:"ne-text"},[t._v(" 知识点：T711 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"dn2RE"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"uc6458d5f"}},[s("span",{staticClass:"ne-text"},[t._v(" 索引 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",staticStyle:{"text-align":"center"},attrs:{id:"u49bc46fe"}},[s("span",{staticClass:"ne-text"},[t._v(" 要点 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"u19a5dfc8"}},[s("span",{staticClass:"ne-text"},[t._v(" 正链 ")])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"ucb2ee2c3"}},[s("span",{staticClass:"ne-text"},[t._v(" 反链 ")])])])]),s("tr",{staticStyle:{height:"37px"}},[s("td",{attrs:{rowspan:"2",width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"uafaa5c9f"}},[s("span",{staticClass:"ne-text"},[t._v(" T711 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接de"}},[s("span",{staticClass:"ne-text"},[t._v(" 掌握类、对象、构造函数、成员变量、成员函数 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"u886b1645"}},[s("br")])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"u1e57b9a7"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#VjX61",href:"#VjX61"}},[s("span",{staticClass:"ne-text"},[t._v(" T791 ")])])])])]),s("tr",{staticStyle:{height:"37px"}},[s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"u202b677f"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161755",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161755",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" (LX701) ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}}),s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161756",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161756",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" (LX702) ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}}),s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161757",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161757",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" (LX703) ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}}),s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161758",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161758",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" (LX704) ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}})])]),s("td",{attrs:{width:"70"}}),s("td",{attrs:{width:"67"}})])])]),s("h1",{attrs:{id:"SOXF7"}},[s("span",{staticClass:"ne-text"},[t._v(" 2. 动态对象和this指针 ")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"uaf4a137d"}},[s("span",{staticClass:"ne-text"},[t._v(" 类就是一种新的数据类型，也可以用创建动态对象。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"eqWMA"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.2")]),t._v("类的动态对象\n "),s("code",[t._v("int main()\n{\n    Team* t1 = new Team(\"Heat\", 53, 29, 110.02, 105.57);\n    Team* t2 = new Team(\"Bulls\", 46, 36, 111.61, 112);\n    cout << (*t1).name << '\\t' << (*t1).rate() << '\\t' << (*t1).gap() << endl;\n    cout << t2->name << '\\t' << t2->rate() << '\\t' << t2->gap() << endl;\n    delete t1;\n    delete t2;\n    return 0;\n}")])]),s("ul",{staticClass:"ne-ul"},[s("li",{attrs:{id:"udbd653ff"}},[s("span",{staticClass:"ne-text"},[t._v(" 当访问指针变量的属性或方法时，可也采用第5行的写法，但是书写时比较繁琐，因此C/C++通常采用第6行的形式进行代替，箭头符号 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" -> ")])]),s("span",{staticClass:"ne-text"},[t._v(" 也产生了指针的含义。 ")])])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u70b114a5"}},[s("span",{staticClass:"ne-text"},[t._v(" 相同类型构造的多个对象，在执行成员函数时，都是执行同一个成员函数。类的每个成员函数（静态函数除外），包括构造函数，都包含一个隐藏的名为this的形参，这个this参数为指向该对象的指针，用于指明当前正在被处理的对象。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"A2A48"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.2")]),t._v("类的动态对象\n "),s("code",[t._v('#include <iostream>\nusing namespace std;\nclass Team {\npublic:\n    string name;\n    Team(const string &n) {\n        name = n;\n    }\n    void test(string name) {\n        cout << this->name <<\'\\t\'<< name << \'\\t\' << this << endl;\n    }\n    void test1(string n) {\n        cout << this->name <<\'\\t\'<< name << \'\\t\' << this << endl;\n    }\n};\nint main()\n{\n    Team t1 = Team("Heat");\n    Team t2 = Team("Bulls");\n    cout << &t1 << \'\\t\' << &t2 << endl;\n    t1.test("t1");\n    t2.test("t2");\n    t1.test1("t1");\n    t2.test1("t2");\n    return 0;\n}')])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"c2XW3"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u0f05616c"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输入 ")])])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u496f9250"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输出 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u37a18577"}},[s("span",{staticClass:"ne-text"},[t._v(" （无） ")])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u9434a573"}},[s("span",{staticClass:"ne-text"},[t._v(" 0x64fda0 0x64fdc0 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u58c3830a"}},[s("span",{staticClass:"ne-text"},[t._v(" Heat t1 0x64fda0 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u4a057838"}},[s("span",{staticClass:"ne-text"},[t._v(" Bulls t2 0x64fdc0 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u395dead4"}},[s("span",{staticClass:"ne-text"},[t._v(" Heat Heat 0x64fda0 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u5906cd6c"}},[s("span",{staticClass:"ne-text"},[t._v(" Bulls Bulls 0x64fdc0 ")])])])])])]),s("ul",{staticClass:"ne-ul"},[s("li",{attrs:{id:"udccc44a9"}},[s("span",{staticClass:"ne-text"},[t._v(" 第20行输出2个对象的地址，说明两个对象存放在两个不同的空间，存放了不同的数据。 ")])]),s("li",{attrs:{id:"ud1912880"}},[s("span",{staticClass:"ne-text"},[t._v(" 第21-24行用两个不同的对象分别调用成员函数 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" test ")])]),s("span",{staticClass:"ne-text"},[t._v(" 和 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" test1 ")])]),s("span",{staticClass:"ne-text"},[t._v(" 时，输出的 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" this ")])]),s("span",{staticClass:"ne-text"},[t._v(" 显示了不同的地址，分别对应 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" t1 ")])]),s("span",{staticClass:"ne-text"},[t._v(" 和 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" t2 ")])]),s("span",{staticClass:"ne-text"},[t._v(" ，其实每个对象调用成员函数时，都隐含把当前对象的地址传递给成员函数，成员函数通过 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" this ")])]),s("span",{staticClass:"ne-text"},[t._v(" 关键字访问这个地址。 ")])]),s("li",{attrs:{id:"u9e6acb32"}},[s("span",{staticClass:"ne-text"},[t._v(" 第13行输出结果看出，当调用属性或成员函数时，可以添加 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" this ")])]),s("span",{staticClass:"ne-text"},[t._v(" 指针，也可以省略，二者作用相同。但是如果跟局部变量有命名冲突时，例如第10行的输出结果，省略时表示局部变量，有 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" this ")])]),s("span",{staticClass:"ne-text"},[t._v(" 指针时表示类的属性或成员函数。 ")])])]),s("h3",{attrs:{id:"BrVpR"}},[s("span",{staticClass:"ne-text"},[t._v(" 知识点：T721 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"Uu0Wv"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"uae1fa425"}},[s("span",{staticClass:"ne-text"},[t._v(" 索引 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",staticStyle:{"text-align":"center"},attrs:{id:"ue89cc8b9"}},[s("span",{staticClass:"ne-text"},[t._v(" 要点 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"u64fc681e"}},[s("span",{staticClass:"ne-text"},[t._v(" 正链 ")])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4446e2e9"}},[s("span",{staticClass:"ne-text"},[t._v(" 反链 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"ueafcce60"}},[s("span",{staticClass:"ne-text"},[t._v(" T721 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"u116e6f29"}},[s("span",{staticClass:"ne-text"},[t._v(" 掌握动态对象和this指针的使用方法 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua46919db"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.yuque.com/upcxailixin/ua125n/qvzagc#QzjoP",href:"ch6#QzjoP"}},[s("span",{staticClass:"ne-text"},[t._v(" T631 ")])])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"ubfced708"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#VjX61",href:"#VjX61"}},[s("span",{staticClass:"ne-text"},[t._v(" T791 ")])])])])])])]),s("h1",{attrs:{id:"e0HnG"}},[s("span",{staticClass:"ne-text"},[t._v(" 3. 动态属性和析构函数 ")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u3e6d3456"}},[s("span",{staticClass:"ne-text"},[t._v(" 当一个类中有指针数据成员时，这些成员的赋值需要通过动态内存分配。如前所述，动态分配的内存将会一直占用内存空间，直到手动释放。而当一个对象使用结束时，希望它所占用的所有内存都被释放。因此每个类都提供了一个析构函数，当对象生命周期结束，或被 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" delete ")])]),s("span",{staticClass:"ne-text"},[t._v(" 删除时，自动释放它的所有成员所占据的内存。此外，如果在对象生命周期结束时，如果有需要保存的文件，需要释放的网络链接等资源，也可以在析构函数中完成。析构函数与构造函数类似，没有返回值，与类名相同，前面加一个 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" ~ ")])]),s("span",{staticClass:"ne-text"},[t._v(" 运算符。析构函数都是无参的，一个类只能最多有一个析构函数。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"IULin"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.3")]),t._v("析构函数的使用\n "),s("code",[t._v('#include <iostream>\nusing namespace std;\nclass Team {\npublic:\n    int* score=NULL;\n    Team(int n) {\n        score = new int(n);\n    }\n    void test(string name) {\n        cout << *score << endl;\n    }\n    ~Team() {\n        if(score!=NULL)\n            delete score;\n    }\n};\nint main()\n{\n    Team *t1 = new Team(101);\n    t1->test("t1");\n    delete t1;\n    return 0;\n}')])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"DfmYB"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"uad25c710"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输入 ")])])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u42c16184"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输出 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"ud0cff173"}},[s("span",{staticClass:"ne-text"},[t._v(" （无） ")])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u1a3cfeb9"}},[s("span",{staticClass:"ne-text"},[t._v(" 101 ")])])])])])]),s("ul",{staticClass:"ne-ul"},[s("li",{attrs:{id:"ud1d5434c"}},[s("span",{staticClass:"ne-text"},[t._v(" 第12-15行就是析构函数。属性 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" score ")])]),s("span",{staticClass:"ne-text"},[t._v(" 在构造函数中被动态分配，当第21行清除对象 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" t1 ")])]),s("span",{staticClass:"ne-text"},[t._v(" 时，自动调用析构函数，属性 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" score ")])]),s("span",{staticClass:"ne-text"},[t._v(" 所分配的堆内存被释放。 ")])])]),s("h3",{attrs:{id:"Tx7ka"}},[s("span",{staticClass:"ne-text"},[t._v(" 知识点：T731 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"Nlkua"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"uc6a6a080"}},[s("span",{staticClass:"ne-text"},[t._v(" 索引 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",staticStyle:{"text-align":"center"},attrs:{id:"u5b6cffbc"}},[s("span",{staticClass:"ne-text"},[t._v(" 要点 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"ud775b6a2"}},[s("span",{staticClass:"ne-text"},[t._v(" 正链 ")])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接03"}},[s("span",{staticClass:"ne-text"},[t._v(" 反链 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"ubd64c1c0"}},[s("span",{staticClass:"ne-text"},[t._v(" T731 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"ue9d4a6c5"}},[s("span",{staticClass:"ne-text"},[t._v(" 掌握动态属性和析构函数使用方法 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"ufb8d91f6"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.yuque.com/upcxailixin/ua125n/qvzagc#QzjoP",href:"ch6#QzjoP"}},[s("span",{staticClass:"ne-text"},[t._v(" T631 ")])])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"ue68d1625"}},[s("br")])])])])]),s("h1",{attrs:{id:"Rr7De"}},[s("span",{staticClass:"ne-text"},[t._v(" 4. 封装 ")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u2826e007"}},[s("span",{staticClass:"ne-text"},[t._v(" 面向对象的三大基本特征就是封装（Encapsulation）、继承（Inheritance）和多态（Polymorphism）。封装的一个非常好的实践准则就是将所有的属性成员定义为私有，这样可以更好地控制数据，当数据访问发生变更时，只需要简单地修改一个地方，就可以满足需求的变更，而不需要大规模的修改代码，从而提高数据的安全性。C++中提供了三种访问控制符进行不同级别的访问控制： ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"751px"},attrs:{border:"1",id:"ipGSh"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"uee24c15a"}},[s("span",{staticClass:"ne-text"},[t._v(" 访问控制符 ")])])]),s("td",{attrs:{width:"644"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua2cfd199"}},[s("span",{staticClass:"ne-text"},[t._v(" 说明 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"udc778f7e"}},[s("span",{staticClass:"ne-text"},[t._v(" private ")])])]),s("td",{attrs:{width:"644"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua369caaf"}},[s("span",{staticClass:"ne-text"},[t._v(" 私有，说明该成员（数据/函数）仅允许在类的内部进行访问 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"u787acdab"}},[s("span",{staticClass:"ne-text"},[t._v(" protected ")])])]),s("td",{attrs:{width:"644"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub75e274d"}},[s("span",{staticClass:"ne-text"},[t._v(" 保护，该成员可以在类的内部访问，也运行在该类的继承类中访问 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"107"}},[s("p",{staticClass:"ne-p",attrs:{id:"uce9c4b03"}},[s("span",{staticClass:"ne-text"},[t._v(" public ")])])]),s("td",{attrs:{width:"644"}},[s("p",{staticClass:"ne-p",attrs:{id:"ueb9afd34"}},[s("span",{staticClass:"ne-text"},[t._v(" 公有，该成员可以随意访问 ")])])])])])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"Zm0rI"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.4")]),t._v("访问控制\n "),s("code",[t._v("#include <iostream>\nusing namespace std;\nclass Team {\nprivate:\n    int score;\npublic:\n    int getScore() { return score; }\n    void setScore(int score) { this->score = score; }\n};\nint main()\n{\n    Team t1 = Team();\n    t1.setScore(101);\n    cout << t1.getScore() << endl;\n    //cout << t1.score << endl;\n    return 0;\n}")])]),s("ul",{staticClass:"ne-ul"},[s("li",{attrs:{id:"uf025bd9b"}},[s("span",{staticClass:"ne-text"},[t._v(" 以上代码中将属性score设定为private，这样类外就无法直接访问，例如第15行执行会报错。但是可以在类内进行访问，例如第7-8行函数体中所示。 ")])]),s("li",{attrs:{id:"ua4d73d73"}},[s("span",{staticClass:"ne-text"},[t._v(" 设置了两个公有函数，分别对属性score进行读和写操作。这样一旦读写操作发生更改，例如将score改成百分制，只需要修改getScore和setScore两个函数的函数体即可，其他访问score的位置都不需要更改。这样对大型程序设计的维护和升级都有很有帮助。 ")])])]),s("h3",{attrs:{id:"dNdcQ"}},[s("span",{staticClass:"ne-text"},[t._v(" 知识点：T741 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"qmaMY"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"ufecd428a"}},[s("span",{staticClass:"ne-text"},[t._v(" 索引 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",staticStyle:{"text-align":"center"},attrs:{id:"u8e67945a"}},[s("span",{staticClass:"ne-text"},[t._v(" 要点 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"u1a95170e"}},[s("span",{staticClass:"ne-text"},[t._v(" 正链 ")])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"uef9c4209"}},[s("span",{staticClass:"ne-text"},[t._v(" 反链 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{rowspan:"2",width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"u0c9c8b05"}},[s("span",{staticClass:"ne-text"},[t._v(" T741 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"ude19ff68"}},[s("span",{staticClass:"ne-text"},[t._v(" 掌握对象的封装和属性的访问控制 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"ufb082081"}},[s("br")])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub7a28b93"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#VjX61",href:"#VjX61"}},[s("span",{staticClass:"ne-text"},[t._v(" T791 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"u7fbd5fd5"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161759",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161759",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" (LX705) ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}}),s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161760",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161760",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" (LX706) ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}}),s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161761",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161761",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" (LX707) ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}})])]),s("td",{attrs:{width:"70"}}),s("td",{attrs:{width:"67"}})])])]),s("h1",{attrs:{id:"W6gu4"}},[s("span",{staticClass:"ne-text"},[t._v(" 5. 继承 ")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-align":"justify","text-indent":"2em"},attrs:{id:"ufb55cb03"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(51, 51, 51)","font-size":"16px"}},[t._v(" 在 C++ 中，继承是一个对象自动获取其父对象的所有属性和行为的过程。这样可以重用、扩展或修改其他类中定义的属性和行为。在 C++ 中，继承另一个类成员的类称为派生类，其成员被继承的类称为基类。派生类是基类的专用类。C++中支持五中形式的继承：1） ")]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)","font-size":"16px"}},[t._v(" 单继承；2）多重继承；3）分层继承；4）多级继承；5）混合继承。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"s3Ngv"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.5")]),t._v("类的继承\n "),s("code",[t._v('#include <iostream>\nusing namespace std;\n// 基类\nclass Vehicle {\n  public:\n    string brand = "Ford";\n    void honk() {\n      cout << "Tuut, tuut! \\n" ;\n    }\n};\n// 派生类\nclass Car: public Vehicle {\n  public:\n    string model = "Mustang";\n};\n\nint main() {\n  Car myCar;\n  myCar.honk();\n  cout << myCar.brand + " " + myCar.model;\n  return 0;\n}')])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"AFL4o"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"ucb191389"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输入 ")])])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4a793bfa"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输出 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u7aa959ef"}},[s("span",{staticClass:"ne-text"},[t._v(" （无） ")])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u877fe6f1"}},[s("span",{staticClass:"ne-text"},[t._v(" Tuut, tuut! ")])]),s("p",{staticClass:"ne-p",attrs:{id:"ued9f7589"}},[s("span",{staticClass:"ne-text"},[t._v(" Ford Mustangg ")])])])])])]),s("ul",{staticClass:"ne-ul"},[s("li",{attrs:{id:"ub483a206"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 从运行结果可以看到，派生类构造的对象 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" myCar ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 可以访问父类的属性 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" brand ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 和成员函数 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" honk ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" ，虽然它们在 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" Car ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 中并没有定义，但是因为 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" Car ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 在第14行定义时继承了基类（父类） ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" Vehicle ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" ，因此父类的 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" public ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 和 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" protected ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 成员都会被继承，注意 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" private ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 成员是不能被继承的， ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" protected ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 成员可以被继承，但是不能被外部变量访问。 ")])]),s("li",{attrs:{id:"u84c907dd"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 父类中可以定义多个子类（派生类）中的公有属性或成员函数，相当于定义了一个标准的接口。子类中需要书写的代码也会大量的减少。 ")])])]),s("h3",{attrs:{id:"Ysm79"}},[s("span",{staticClass:"ne-text"},[t._v(" 知识点：T751 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"pHRUM"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf6a80fcc"}},[s("span",{staticClass:"ne-text"},[t._v(" 索引 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",staticStyle:{"text-align":"center"},attrs:{id:"u2c8e1bb7"}},[s("span",{staticClass:"ne-text"},[t._v(" 要点 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4bf232e3"}},[s("span",{staticClass:"ne-text"},[t._v(" 正链 ")])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"ue8995836"}},[s("span",{staticClass:"ne-text"},[t._v(" 反链 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{rowspan:"2",width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub1ac688f"}},[s("span",{staticClass:"ne-text"},[t._v(" T751 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub723a885"}},[s("span",{staticClass:"ne-text"},[t._v(" 掌握对象的 ")]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(51, 51, 51)","font-size":"16px"}},[t._v(" 继承的使用方法 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"u7d77092c"}},[s("br")])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"u654a87f8"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#WLtg1",href:"#WLtg1"}},[s("span",{staticClass:"ne-text"},[t._v(" T771 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub301227f"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161762",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161762",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" (LX708) ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}})])]),s("td",{attrs:{width:"70"}}),s("td",{attrs:{width:"67"}})])])]),s("h1",{attrs:{id:"FhY0Y"}},[s("span",{staticClass:"ne-text"},[t._v(" 6. 多态 ")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u3471b168"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 多态意味着“多种形式”，当有许多 ")]),s("span",{staticClass:"ne-text"},[t._v(" 通过继承相互关联的类时就会发生这种情况。继承从另一个类继承属性和方法。多态性使用这些方法来执行不同的任务，能够以不同的方式执行单个操作。多态按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。C++ 多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。C++中的多态主要使用关键字virtual实现的，先看一下virtual的使用方法。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"H5oaN"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.6")]),t._v("virtual关键字的使用\n "),s("code",[t._v('#include<iostream>\nusing namespace std;\n  \nclass base {\npublic:\n    virtual void print() {\n        cout << "print base class\\n";\n    }  \n    void show() {\n        cout << "show base class\\n";\n    }\n};\n  \nclass derived : public base {\npublic:\n    void print() {\n        cout << "print derived class\\n";\n    }  \n    void show()  {\n        cout << "show derived class\\n";\n    }\n};\n  \nint main()\n{\n    base *bptr;\n    derived d;\n    bptr = &d;  \n    // Virtual function, binded at runtime\n    bptr->print();  \n    // Non-virtual function, binded at compile time\n    bptr->show();    \n    return 0;\n}')])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"GCU07"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u38dc1fc5"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输入 ")])])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u230cfb72"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输出 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u09dad921"}},[s("span",{staticClass:"ne-text"},[t._v(" （无） ")])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u2d31b1ba"}},[s("span",{staticClass:"ne-text"},[t._v(" print derived class ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u85f350c1"}},[s("span",{staticClass:"ne-text"},[t._v(" show base class ")])])])])])]),s("p",{staticClass:"ne-p",attrs:{id:"u740e779c"}},[s("br")]),s("ul",{staticClass:"ne-ul"},[s("li",{attrs:{id:"u7f249781"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 派生类中如果重新定义了父类的成员函数，称为函数重载。通过函数重载，子类可以修改父类的同名函数。也就是说，子类和父类具有同名的访问接口（函数），但是可以具有不同的具体行为。以上例子中的show函数就是一个重载函数。 ")])]),s("li",{attrs:{id:"u2bce6eb4"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" print函数的实现形式与show基本相同，但是加了关键字virtual。运行时多态性只能通过基类类型的指针（或引用）来实现。此外，基类指针既可以指向基类的对象，也可以指向派生类的对象。在上面的代码中，基类指针 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(39, 50, 57)","font-size":"16px"}},[t._v(" bptr ")])]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 包含派生类的对象 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(39, 50, 57)","font-size":"16px"}},[t._v(" d ")])]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 的地址。 ")])]),s("li",{attrs:{id:"u3df78b54"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 后期（运行时）绑定根据指针的内容（即指针指向的位置）进行，早期（编译时）绑定根据指针的类型进行，因为 print() 函数是用 virtual 关键字声明的，所以它将在运行时绑定（输出派生类内容，因为指针指向派生类的对象），而 show() 是非虚函数，因此它将在编译时绑定（输出基类内容，因为指针是基类类型）。 ")])]),s("li",{attrs:{id:"ue4bb79ea"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 如果在基类中创建了一个虚函数，并且它在派生类中被覆盖，那么不需要在派生类中使用 virtual 关键字，函数在派生类中被自动视为虚函数。 ")])])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u989cee26"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 下面讨论如何用virtual实现多态。例如，考虑一个 ")]),s("span",{staticClass:"ne-text"},[t._v(" 名为 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" Container ")])]),s("span",{staticClass:"ne-text"},[t._v(" 的基类，它有一个名为 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" pop() ")])]),s("span",{staticClass:"ne-text"},[t._v(" 的方法。容器的 ")]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 派生类可以是队列（ ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" Queue ")])]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" ）或堆栈（ ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" Stack ")])]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" ），对于 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" pop() ")])]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 这个行为，它们有各自不同的表现，实现了函数重载。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"DN8Ja"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.7")]),t._v("函数重载\n "),s("code",[t._v('#include <iostream>\nusing namespace std;\n// 基类\nclass Container {\npublic:\n    virtual void pop()=0;    //纯虚函数，定义一个接口，没有具体实现\n\t// virtual void pop(){   //虚函数，可以有自己的定义实现\n    //    cout << "Container Pop!\\n" ;\n    // }\n};\n// 派生类\nclass Queue : public Container {\npublic:\n    void pop() {\n        cout << "Queue: Pop the first element!\\n" ;\n    }\n};\n// 派生类\nclass Stack : public Container {\npublic:\n    void pop() {\n        cout << "Stack: Pop the last element!\\n" ;\n    }\n};\n\nvoid polymorphism(Container* container){\n    container->pop();\n}\n\nint main() {\n    Queue q;\n    Stack s;\n    q.pop();\n    s.pop();\n    Container* vq = &q;\n    vq->pop();\n    Container* vs = &s;\n    vs->pop();\n    polymorphism(vq);\n    polymorphism(vs);\n    return 0;\n}')])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"MiJU4"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u1c8c64c6"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输入 ")])])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u264ab41e"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输出 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"ue75c18a8"}},[s("span",{staticClass:"ne-text"},[t._v(" （无） ")])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u52d84f50"}},[s("span",{staticClass:"ne-text"},[t._v(" Queue: Pop the first element! ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u8ebb688a"}},[s("span",{staticClass:"ne-text"},[t._v(" Stack: Pop the last element! ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u0d369637"}},[s("span",{staticClass:"ne-text"},[t._v(" Queue: Pop the first element! ")])]),s("p",{staticClass:"ne-p",attrs:{id:"ud28378c2"}},[s("span",{staticClass:"ne-text"},[t._v(" Stack: Pop the last element! ")])]),s("p",{staticClass:"ne-p",attrs:{id:"uc1b36fd0"}},[s("span",{staticClass:"ne-text"},[t._v(" Queue: Pop the first element! ")])]),s("p",{staticClass:"ne-p",attrs:{id:"uce4bf7a1"}},[s("span",{staticClass:"ne-text"},[t._v(" Stack: Pop the last element! ")])])])])])]),s("ul",{staticClass:"ne-ul"},[s("li",{attrs:{id:"ue675d550"}},[s("span",{staticClass:"ne-text"},[t._v(" 第6行在基类中定义了一个纯虚函数 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" pop() ")])]),s("span",{staticClass:"ne-text"},[t._v(" ，注意纯虚函数要 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" =0 ")])]),s("span",{staticClass:"ne-text"},[t._v(" ，这是语法规定。这个函数没有具体实现过程，只是要求其所有的派生类都必须定义 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" pop() ")])]),s("span",{staticClass:"ne-text"},[t._v(" 这个成员函数。如果派生类中没有定义成员函数 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" pop() ")])]),s("span",{staticClass:"ne-text"},[t._v(" ，编译会报错。很多情况下，虚函数都是为了定义一个统一的接口，在父类上的实现没有意义，因此纯虚函数就发挥了它的作用。 ")])]),s("li",{attrs:{id:"u9a0f2227"}},[s("span",{staticClass:"ne-text"},[t._v(" 也可以对父类的虚函数进行实现，如第7-9行所示。 ")])]),s("li",{attrs:{id:"uadf84d3e"}},[s("span",{staticClass:"ne-text"},[t._v(" 第33-34行是正常的对象调用函数操作 ")])]),s("li",{attrs:{id:"u82a2772c"}},[s("span",{staticClass:"ne-text"},[t._v(" 第35-38行显示不同派生类的对象会执行不同的行为。这里需要两个条件：1）必须是指针，只有指针才能实现 ")]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 后期（运行时）绑定。基类指针既可以指向基类的对象，也可以指向派生类的对象；2）pop()函数必须是虚函数，否则父类指针调用的pop()函数将会是父类的pop()函数。只有虚函数才会调用具体指向对象的pop()函数。 ")])]),s("li",{attrs:{id:"u3c8c8b48"}},[s("span",{staticClass:"ne-text"},[t._v(" 最后看第26-28行定义了一个函数polymorphism()，因为 ")]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 基类指针既可以指向基类的对象，也可以指向派生类的对象，所以 ")]),s("span",{staticClass:"ne-text"},[t._v(" Container以及其所有的子类都可以用指针的形式传入。从继承的角度，Container所拥有的所有属性和方法，其子类也必然拥有，因此polymorphism()中可以定义基于Container的操作流程（语句块）。但是基于多态机制，当传入不同的对象时，会执行不同的操作。如第39-40行所示，虽然vq和vs都是Container类型的指针，但是指向不同的派生对象。相同类型的指针可以执行相同的操作，但执行的结果依赖于具体对象的具体定义。这是使用虚函数的最大作用。 ")])])]),s("h3",{attrs:{id:"F5udX"}},[s("span",{staticClass:"ne-text"},[t._v(" 知识点：T761-T762 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"UUpSZ"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf95c51fd"}},[s("span",{staticClass:"ne-text"},[t._v(" 索引 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",staticStyle:{"text-align":"center"},attrs:{id:"u28f90b4f"}},[s("span",{staticClass:"ne-text"},[t._v(" 要点 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf696d139"}},[s("span",{staticClass:"ne-text"},[t._v(" 正链 ")])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"u620a7659"}},[s("span",{staticClass:"ne-text"},[t._v(" 反链 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"udb68e789"}},[s("span",{staticClass:"ne-text"},[t._v(" T761 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"u0c560756"}},[s("span",{staticClass:"ne-text"},[t._v(" 掌握virtual关键字的使用 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"u3dee6ec8"}},[s("br")])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"u80b042b7"}},[s("br")])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"u8d7ca34b"}},[s("span",{staticClass:"ne-text"},[t._v(" T762 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"u27cbd9f9"}},[s("span",{staticClass:"ne-text"},[t._v(" 掌握 ")]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)"}},[t._v(" 函数重载的实现 ")])])]),s("td",{attrs:{width:"70"}}),s("td",{attrs:{width:"67"}})])])]),s("h1",{attrs:{id:"f0cmO"}},[s("span",{staticClass:"ne-text"},[t._v(" 7. 操作符重载 ")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-align":"justify","text-indent":"2em"},attrs:{id:"u0c3566cb"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(0, 0, 0)","font-size":"16px"}},[t._v(" 用户可以重新定义或重载 C++ 中可用的大多数内置运算符，可以给运算符赋予新的自定义行为，并且书写和理解上都更加清晰。重载运算符是具有特殊名称的函数：关键字“operator”后跟正在定义的运算符的符号。与任何其他函数一样，重载运算符具有返回类型和参数列表。操作符重载和普通成员函数重载的含义是完全相同的，只是在定义和使用上略有区别。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"BzhPa"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.8")]),t._v("操作符重载\n "),s("code",[t._v('#include <iostream>\nusing namespace std;\nclass Box {\npublic:\n    Box(double l, double b, double h) {\n        length = l; breadth = b; height = h;\n    }\n    double getVolume(void) {\n        return length * breadth * height;\n    }\n    // 重载操作符+\n    Box operator+(const Box &b) {\n        return Box(this->length+b.length,this->breadth+b.breadth,this->height+b.height);\n    }\nprivate:\n    double length,breadth,height;  // 长宽高\n};\nint main()\n{\n    Box box1(6., 7., 5.);    \n    Box box2(12., 13., 10.); \n    cout << "Volume of Box1 : " << box1.getVolume() << endl;\n    cout << "Volume of Box2 : " << box2.getVolume() << endl;\n    Box box3 = box1 + box2;\n    cout << "Volume of Box3 : " << box3.getVolume() << endl;\n    return 0;\n}')])]),s("ul",{staticClass:"ne-ul"},[s("li",{attrs:{id:"u98f7676f"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 第12-14行重载了操作符 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" + ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" ，两个操作数分别为当前对象 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" this ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 和参数 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" b ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" ，当第24行对 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" Box ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 对象执行 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" + ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 操作时，就会调用这个函数。C++中提供的操作符都可以进行重载。 ")])]),s("li",{attrs:{id:"u6cf979f8"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" 通常对操作符重载时，参数都使用const，防止用户对其进行修改，引用可以减少传值过程中对象被复制从而浪费时间和空间。 ")])])]),s("h3",{attrs:{id:"WLtg1"}},[s("span",{staticClass:"ne-text"},[t._v(" 知识点：T771 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"A9sdu"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"u7806bc41"}},[s("span",{staticClass:"ne-text"},[t._v(" 索引 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",staticStyle:{"text-align":"center"},attrs:{id:"u20d7bbae"}},[s("span",{staticClass:"ne-text"},[t._v(" 要点 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"u29ab0381"}},[s("span",{staticClass:"ne-text"},[t._v(" 正链 ")])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"u8e991612"}},[s("span",{staticClass:"ne-text"},[t._v(" 反链 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{rowspan:"2",width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4b88bc5a"}},[s("span",{staticClass:"ne-text"},[t._v(" T771 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接df"}},[s("span",{staticClass:"ne-text"},[t._v(" 掌握操作符重载的使用 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"ue583b6cb"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#Ysm79",href:"#Ysm79"}},[s("span",{staticClass:"ne-text"},[t._v(" T751 ")])])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接5d"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#VjX61",href:"#VjX61"}},[s("span",{staticClass:"ne-text"},[t._v(" T791 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"u9a884289"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161763",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161763",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" (LX709) ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}}),s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161764",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161764",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" （LX710） ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}})])]),s("td",{attrs:{width:"70"}}),s("td",{attrs:{width:"67"}})])])]),s("h1",{attrs:{id:"j5KbQ"}},[s("span",{staticClass:"ne-text"},[t._v(" 8. 静态属性 ")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u808f3271"}},[s("span",{staticClass:"ne-text"},[t._v(" 在变量定义前加上关键字static，就转换为静态变量。静态变量和全局变量都存储在全局静态数据区，其生命周期都从定义开始持续到程序运行结束。静态变量的初始化只会被执行一次。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"HhAyD"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.9")]),t._v("静态变量的使用\n "),s("code",[t._v('#include <iostream>\nusing namespace std;\n// 基类\nclass Container {\npublic:\n    static int count;\n    Container() { ++count; }\n    ~Container() { --count; }\n};\n// 派生类\nclass Queue : public Container {\npublic:\n    void pop() {\n        cout << "Pop the first element!\\n" ;\n    }\n};\nint Container::count = 0;\nint main() {\n    Container c;\n    cout << Container::count << endl;\n    cout << c.count << endl;\n    Container arr[10];\n    cout << Container::count << endl;\n    Container *p = new Container();\n    cout << Container::count << endl;\n    Container *pp = new Container[5];\n    cout << Container::count << endl;\n    delete p;\n    cout << Container::count << endl;\n    delete[] pp;\n    cout << Container::count << endl;\n    Queue q;\n    cout << Container::count << endl;\n    return 0;\n}')])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"ygqoM"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"ud064f0a6"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输入 ")])])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u228b6097"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输出 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u16a4df00"}},[s("span",{staticClass:"ne-text"},[t._v(" （无） ")])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"ue0c4746a"}},[s("span",{staticClass:"ne-text"},[t._v(" 1 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u1111a739"}},[s("span",{staticClass:"ne-text"},[t._v(" 11 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u1fb7cdd9"}},[s("span",{staticClass:"ne-text"},[t._v(" 12 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u69ad3f70"}},[s("span",{staticClass:"ne-text"},[t._v(" 17 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"ubb6bca4f"}},[s("span",{staticClass:"ne-text"},[t._v(" 16 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u1c092a47"}},[s("span",{staticClass:"ne-text"},[t._v(" 16 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"ua54c986d"}},[s("span",{staticClass:"ne-text"},[t._v(" 11 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u84dd8686"}},[s("span",{staticClass:"ne-text"},[t._v(" 12 ")])])])])])]),s("ul",{staticClass:"ne-ul"},[s("li",{attrs:{id:"ued0003c1"}},[s("span",{staticClass:"ne-text"},[t._v(" 第13行定义了一个静态成员属性，在第17行进行初始化。因为 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" count ")])]),s("span",{staticClass:"ne-text"},[t._v(" 是成员属性，调用时必须添加类修饰符，例如 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" Container:: ")])]),s("span",{staticClass:"ne-text"},[t._v(" ，或通过对象实例进行调用（第21行） ")])]),s("li",{attrs:{id:"u84404e03"}},[s("span",{staticClass:"ne-text"},[t._v(" 静态属性的使用方法和作用范围与其他属性相同，但是其分配在全局静态数据区，因此不属于任何一个对象，只有唯一的存储空间。 ")])]),s("li",{attrs:{id:"u95dd57c3"}},[s("span",{staticClass:"ne-text"},[t._v(" 第19-31行显示，无论是局部变量，还是动态变量，无论是单个变量，还是数组，其构建时都会调用构造函数，释放时都会调用析构函数。因为静态变量的唯一性，可以对对象的数量进行计数。 ")])]),s("li",{attrs:{id:"u996de262"}},[s("span",{staticClass:"ne-text"},[t._v(" 第32-33行的运行结果发现对派生类进行调用时，父类的构造函数也会被调用。按照C++的语法规定，构建派生类时，如果没有明确指定父类构造函数，会默认调用父类的无参构造函数。一个类如果没有明确定义构造函数和析构函数，会自动生成一个默认的无参构造函数和一个空的析构函数。 ")])])]),s("h3",{attrs:{id:"Z9DBN"}},[s("span",{staticClass:"ne-text"},[t._v(" 知识点：T781 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"lUUAl"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"ubaaa7ead"}},[s("span",{staticClass:"ne-text"},[t._v(" 索引 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",staticStyle:{"text-align":"center"},attrs:{id:"uf7f1e280"}},[s("span",{staticClass:"ne-text"},[t._v(" 要点 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"u424f74b2"}},[s("span",{staticClass:"ne-text"},[t._v(" 正链 ")])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub2c3b4e9"}},[s("span",{staticClass:"ne-text"},[t._v(" 反链 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{rowspan:"2",width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"u185e9704"}},[s("span",{staticClass:"ne-text"},[t._v(" T781 ")])])]),s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接80"}},[s("span",{staticClass:"ne-text"},[t._v(" 掌握静态属性的定义和使用 ")])])]),s("td",{attrs:{width:"70"}},[s("p",{staticClass:"ne-p",attrs:{id:"u62b93c9a"}},[s("span",{staticClass:"ne-text"}),s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.yuque.com/upcxailixin/ua125n/iz3dks#AlX1z",href:"ch3#AlX1z"}},[s("span",{staticClass:"ne-text"},[t._v(" T335 ")])])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"u7bc17236"}},[s("br")])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"559"}},[s("p",{staticClass:"ne-p",attrs:{id:"u91507e8a"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161755",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161755",target:"_blank"}},[s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}},[t._v(" (LX701) ")])]),s("span",{staticClass:"ne-text",staticStyle:{"font-size":"16px"}})])]),s("td",{attrs:{width:"70"}}),s("td",{attrs:{width:"67"}})])])]),s("h1",{attrs:{id:"aHidZ"}},[s("span",{staticClass:"ne-text"},[t._v(" 9. 综合练习-构建链表 ")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"uedd452e7"}},[s("span",{staticClass:"ne-text"},[t._v(" 本节通过构建链表，练习类和对象的构造，动态对象和this指针、封装和操作符重载。更重要的是理解链表这种特殊的数据结构。链表可以形成一个序列，但是序列中的每个节点的存储空间都是不连续的。这样可以更加方便的插入和删除，但是不能进行随机访问。 ")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u614e3334"}},[s("span",{staticClass:"ne-text"},[t._v(" 首先，构建一个节点类，每个节点除了保存数据外，更重要的是形成一个指针，用与指向下一个节点，这样才能形成序列。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"qOfzC"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.10")]),t._v("构建节点类\n "),s("code",[t._v("class Node\n{\npublic:\n    int val;\t\t\t\t\t\t\t\t//存储数据，此处以int为例\n    Node *next;\t\t\t\t\t\t\t\t//用于存储下一个节点\n    Node(int val, Node *next = nullptr)\n    {\n        this->val = val;\t\t\t\t\t//成员变量和形参同名，用this指针进行区分\n        this->next = next;\n    }\n};")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u90735aea"}},[s("span",{staticClass:"ne-text"},[t._v(" 其次构建一个迭代器，用于遍历节点。这里最重要的一个操作是将节点封装成private，外部无法对其直接访问。因为链表的存储空间不连续，因此不能使用大于小于等比较，但是要重载等于和不等于操作。任何迭代器都要支持自加和取值操作。从以下代码可以看出，迭代器就是一个封装后的指针，但是因为进行了封装，用户不能直接访问指针，因此只能使用Iterator中提供的方法对指针进行访问，限定了用户的访问权限，达成了安全访问。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"qVzkh"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.11")]),t._v("构建迭代器\n "),s("code",[t._v("class Iterator{\nprivate:\n    Node* ptr;\t\t\t\t\t//构造私有节点指针\npublic:\n    Iterator(Node* node){\n        ptr = node;\n    }\n    // 拷贝赋值函数\n    Iterator& operator=(const Iterator& it) {\n        ptr = it.ptr;\t\t\t//对私有节点指针进行赋值\n        return *this;\t\t\t//返回自己\n    }\n    // 等于运算符\n    bool operator==(const Iterator& it) const {\n        return ptr == it.ptr;\t//对私有节点指针进行比较\n    }\n    // 不等于运算符\n    bool operator!=(const Iterator& it) const {\n        return ptr != it.ptr;\t//对私有节点指针进行比较\n    }\n    //前缀自加\n    Iterator& operator++() {\n        ptr = ptr->next;\t\t//让私有指针指向下一个节点\n        return *this;\t\t\t//返回自己\n    }\n    //后缀自加\n    Iterator operator++(int) {\n        Iterator tmp = *this;\t//得到自己\n        ++(*this);\t\t\t\t//执行前缀自加操作，让私有指针指向下一个节点\n        return tmp;\n    }\n    int operator*(){\n        return ptr->val;\t\t//取值操作\n    }\n};")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u2a49c1b6"}},[s("span",{staticClass:"ne-text"},[t._v(" 然后构建一个链表类，其中的head始终指向头节点。begin和end操作能够得到迭代器。然后分别实现了尾部添加、插入和删除操作。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"uDSYC"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.12")]),t._v("构建链表类\n "),s("code",[t._v("class List{\nprivate:\n    Node* head;\npublic:\n    List(){\n        head = nullptr;\n    }\n    Iterator begin(){\n        return Iterator(this->head);\t\t//由头结点封装的迭代器\n    }\n    Iterator end(){\n        return Iterator(nullptr);\t\t\t//尾结点是空指针\n    }\n    void push_back(int val){\n        Node* node = new Node(val);\t\t\t//构造一个新节点\n        if(!head)\t\t\t\t\t\t\t//如果链表为空\n            head = node;\t\t\t\t\t//头结点就是新节点，构建了只有一个节点的链表\n        else{\n            Node* ptr = head;\n            while(ptr->next)\t\t\t\t//如果没有到尾部\n                ptr = ptr->next;\t\t\t//转入下一个节点\n            ptr->next = node;\t\t\t\t//新节点作为尾节点\n        }\n    }\n    bool insert(const Iterator& it,int val){\n        Node* tmp = head;\n        while(Iterator(tmp)!=end() && Iterator(tmp->next)!=it)\t//以迭代器形式比较\n            tmp = tmp->next;\t\t\t\t//转入下一个节点\n        if(Iterator(tmp)==end())  return false;\t//没有找到迭代器指向的位置\n        Node* node = new Node(val);\t\t\t//构造一个新节点\n        node->next = tmp->next;\t\t\t\t//新节点和下一个节点链接\n        tmp->next = node;\t\t\t\t\t//新节点和上一个节点链接，注意和上一行顺序不能变\n        return true;\n    }\n    bool erase(const Iterator& it){\n        Node* tmp = head;\n        while(Iterator(tmp)!=end() && Iterator(tmp->next)!=it)\t//以迭代器形式比较\n            tmp = tmp->next;\t\t\t\t//转入下一个节点\n        if(Iterator(tmp)==end())  return false;\t//没有找到迭代器指向的位置\n        Node* node = tmp->next;\t\t\t\t//保留要删除节点的指针\n        tmp->next = node->next;\t\t\t\t//让上一个节点直接执行下一个节点，形成删除\n        delete node;\t\t\t\t\t\t//删除节点\n        return true;\n    }\n};")])]),s("p",{staticClass:"ne-p",staticStyle:{"text-indent":"2em"},attrs:{id:"u0bb2407f"}},[s("span",{staticClass:"ne-text"},[t._v(" 最后，利用以上的定义，演示了使用方法。这里可以看到，只能通过迭代器访问节点，用户不能直接对节点进行操作，从而实现了对链表的安全访问。因为List支持了 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" begin ")])]),s("span",{staticClass:"ne-text"},[t._v(" 、 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" end ")])]),s("span",{staticClass:"ne-text"},[t._v(" 和迭代器，因此可以执行 ")]),s("code",{staticClass:"ne-code"},[s("span",{staticClass:"ne-text"},[t._v(" for(auto 变量:容器) ")])]),s("span",{staticClass:"ne-text"},[t._v(" 操作，进一步说明迭代器可以实现算法和具体数据的分离。 ")])]),s("pre",{staticClass:"ne-codeblock language-cpp",attrs:{"data-language":"cpp",id:"Jf9hQ"}},[s("span",{staticStyle:{"font-weight":"bold"}},[t._v("代码7.13")]),t._v("演示链表类的使用\n "),s("code",[t._v("#include<iostream>\nusing namespace std;\n\nint main(){\n    int m;\n    cin>>m;\n    List ls;\n    for(int i=0;i<m;i++)\n        ls.push_back(i+1);\t\t//构建链表的数据\n    for(auto it = ls.begin();it!=ls.end();it++)\n        cout<<*it<<' ';\n    cout<<endl;\n    auto it = ls.begin();\t\t//指向链表的开始\n    it++;\t\t\t\t\t\t//指向下一个节点\n    ls.insert(it,10);\t\t\t//插入新节点\n    for(auto e:ls)\t\t\t\t//遍历\n        cout<<e<<' ';\n    cout<<endl;\n    ls.erase(it);\t\t\t\t//删除指定的节点，这时依旧指向2对应的节点\n    for(auto e:ls)\t\t\t\t//遍历\n        cout<<e<<' ';\n    cout<<endl;\n    return 0;\n}")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"ZJpW2"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u9da3a212"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输入 ")])])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"ubc827f8c"}},[s("strong",[s("span",{staticClass:"ne-text"},[t._v(" 样例输出 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u6c80d288"}},[s("span",{staticClass:"ne-text"},[t._v(" 5 ")])])]),s("td",{attrs:{width:"375"}},[s("p",{staticClass:"ne-p",attrs:{id:"u433e31f6"}},[s("span",{staticClass:"ne-text"},[t._v(" 1 2 3 4 5 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"u96c6bf50"}},[s("span",{staticClass:"ne-text"},[t._v(" 1 10 2 3 4 5 ")])]),s("p",{staticClass:"ne-p",attrs:{id:"链接b2"}},[s("span",{staticClass:"ne-text"},[t._v(" 1 10 3 4 5 ")])])])])])]),s("h3",{attrs:{id:"VjX61"}},[s("span",{staticClass:"ne-text"},[t._v(" 知识点：T791 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"100%"},attrs:{border:"1",id:"yayeM"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"u66e15089"}},[s("span",{staticClass:"ne-text"},[t._v(" 索引 ")])])]),s("td",{attrs:{width:"513"}},[s("p",{staticClass:"ne-p",staticStyle:{"text-align":"center"},attrs:{id:"u588b4606"}},[s("span",{staticClass:"ne-text"},[t._v(" 要点 ")])])]),s("td",{attrs:{width:"98"}},[s("p",{staticClass:"ne-p",attrs:{id:"u76c847ef"}},[s("span",{staticClass:"ne-text"},[t._v(" 正链 ")])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"u69096d75"}},[s("span",{staticClass:"ne-text"},[t._v(" 反链 ")])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"58"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub021187d"}},[s("span",{staticClass:"ne-text"},[t._v(" T791 ")])])]),s("td",{attrs:{width:"513"}},[s("p",{staticClass:"ne-p",attrs:{id:"ua8ee86db"}},[s("span",{staticClass:"ne-text"},[t._v(" 掌握空间不连续序列的使用，了解迭代器的作用 ")])])]),s("td",{attrs:{width:"98"}},[s("p",{staticClass:"ne-p",attrs:{id:"uee2a09d7"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#ZvJ3S",href:"#ZvJ3S"}},[s("span",{staticClass:"ne-text"},[t._v(" T711 ")])]),s("span",{staticClass:"ne-text"},[t._v(" , ")]),s("a",{staticClass:"ne-link",attrs:{"data-href":"#BrVpR",href:"#BrVpR"}},[s("span",{staticClass:"ne-text"},[t._v(" T721 ")])]),s("span",{staticClass:"ne-text"},[t._v(" , ")]),s("a",{staticClass:"ne-link",attrs:{"data-href":"#dNdcQ",href:"#dNdcQ"}},[s("span",{staticClass:"ne-text"},[t._v(" T741 ")])]),s("span",{staticClass:"ne-text"},[t._v(" , ")]),s("a",{staticClass:"ne-link",attrs:{"data-href":"#WLtg1",href:"#WLtg1"}},[s("span",{staticClass:"ne-text"},[t._v(" T771 ")])])])]),s("td",{attrs:{width:"67"}},[s("p",{staticClass:"ne-p",attrs:{id:"u8d9c0b3e"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.yuque.com/upcxailixin/ua125n/zzw6o7#BPKTU",href:"ch8#BPKTU"}},[s("span",{staticClass:"ne-text"},[t._v(" T822 ")])]),s("span",{staticClass:"ne-text"},[t._v(" , ")]),s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.yuque.com/upcxailixin/ua125n/zzw6o7#mM2Dg",href:"ch8#mM2Dg"}},[s("span",{staticClass:"ne-text"},[t._v(" T863 ")])])])])])])]),s("h1",{attrs:{id:"RZWQr"}},[s("span",{staticClass:"ne-text"},[t._v(" 题单 ")])]),s("table",{staticClass:"ne-table",staticStyle:{width:"771px"},attrs:{border:"1",id:"tEvjL"}},[s("tbody",[s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u9f3f2876"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(38, 38, 38)"}},[t._v(" 序号 ")])])]),s("td",{attrs:{width:"105"}},[s("p",{staticClass:"ne-p",attrs:{id:"u0451f3b8"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(38, 38, 38)"}},[t._v(" 题目名称 ")])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub846d235"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(38, 38, 38)"}},[t._v(" 知识点 ")])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4348a9bb"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(38, 38, 38)"}},[t._v(" 序号 ")])])]),s("td",{attrs:{width:"102"}},[s("p",{staticClass:"ne-p",attrs:{id:"u41adb055"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(38, 38, 38)"}},[t._v(" 题目名称 ")])])]),s("td",{attrs:{width:"99"}},[s("p",{staticClass:"ne-p",attrs:{id:"u850b9ce5"}},[s("span",{staticClass:"ne-text",staticStyle:{color:"rgb(38, 38, 38)"}},[t._v(" 知识点 ")])])])]),s("tr",{staticStyle:{height:"38px"}},[s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u53ddea7a"}},[s("span",{staticClass:"ne-text"},[t._v(" LX701 ")])])]),s("td",{attrs:{width:"105"}},[s("p",{staticClass:"ne-p",attrs:{id:"ue3188278"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161755",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161755",target:"_blank"}},[s("span",{staticClass:"ne-text"},[t._v(" 平均分计算 ")])])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"ue087b95c"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#EoYNR",href:"#EoYNR"}},[s("span",{staticClass:"ne-text"},[t._v(" T711 ")])]),s("span",{staticClass:"ne-text"},[t._v(" , ")]),s("span",{staticClass:"ne-text",staticStyle:{color:"rgba(0, 0, 0, 0.75)","font-size":"16px"}}),s("a",{staticClass:"ne-link",attrs:{"data-href":"#Z9DBN",href:"#Z9DBN"}},[s("span",{staticClass:"ne-text"},[t._v(" T781 ")])])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u5ea7bd0a"}},[s("span",{staticClass:"ne-text"},[t._v(" LX702 ")])])]),s("td",{attrs:{width:"102"}},[s("p",{staticClass:"ne-p",attrs:{id:"u3f4073d9"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161756",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161756",target:"_blank"}},[s("span",{staticClass:"ne-text"},[t._v(" 点圆 ")])])])]),s("td",{attrs:{width:"99"}},[s("p",{staticClass:"ne-p",attrs:{id:"u11d27639"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#EoYNR",href:"#EoYNR"}},[s("span",{staticClass:"ne-text"},[t._v(" T711 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u10804dae"}},[s("span",{staticClass:"ne-text"},[t._v(" LX703 ")])])]),s("td",{attrs:{width:"105"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf3fab5da"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161757",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161757",target:"_blank"}},[s("span",{staticClass:"ne-text"},[t._v(" 统计数字 ")])])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u702d03c4"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#EoYNR",href:"#EoYNR"}},[s("span",{staticClass:"ne-text"},[t._v(" T711 ")])])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"ubb3448ee"}},[s("span",{staticClass:"ne-text"},[t._v(" LX704 ")])])]),s("td",{attrs:{width:"102"}},[s("p",{staticClass:"ne-p",attrs:{id:"u236b50b7"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161758",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161758",target:"_blank"}},[s("span",{staticClass:"ne-text"},[t._v(" 三维坐标 ")])])])]),s("td",{attrs:{width:"99"}},[s("p",{staticClass:"ne-p",attrs:{id:"ub241ed6d"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#EoYNR",href:"#EoYNR"}},[s("span",{staticClass:"ne-text"},[t._v(" T711 ")])])])])]),s("tr",{staticStyle:{height:"38px"}},[s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u781c0d73"}},[s("span",{staticClass:"ne-text"},[t._v(" LX705 ")])])]),s("td",{attrs:{width:"105"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf25c2b49"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161759",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161759",target:"_blank"}},[s("span",{staticClass:"ne-text"},[t._v(" 点圆关系 ")])])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u1e84a30b"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#Rr7De",href:"#Rr7De"}},[s("span",{staticClass:"ne-text"},[t._v(" T741 ")])])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"udf0452b8"}},[s("span",{staticClass:"ne-text"},[t._v(" LX706 ")])])]),s("td",{attrs:{width:"102"}},[s("p",{staticClass:"ne-p",attrs:{id:"uebddb2fc"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161760",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161760",target:"_blank"}},[s("span",{staticClass:"ne-text"},[t._v(" Car类 ")])])])]),s("td",{attrs:{width:"99"}},[s("p",{staticClass:"ne-p",attrs:{id:"u74fef187"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#Rr7De",href:"#Rr7De"}},[s("span",{staticClass:"ne-text"},[t._v(" T741 ")])])])])]),s("tr",{staticStyle:{height:"38px"}},[s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"ufce0b52e"}},[s("span",{staticClass:"ne-text"},[t._v(" LX707 ")])])]),s("td",{attrs:{width:"105"}},[s("p",{staticClass:"ne-p",attrs:{id:"ubaf79de8"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161761",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161761",target:"_blank"}},[s("span",{staticClass:"ne-text"},[t._v(" 角度的加法 ")])])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"ud7c702a6"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#Rr7De",href:"#Rr7De"}},[s("span",{staticClass:"ne-text"},[t._v(" T741 ")])])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u2dbc300b"}},[s("span",{staticClass:"ne-text"},[t._v(" LX708 ")])])]),s("td",{attrs:{width:"102"}},[s("p",{staticClass:"ne-p",attrs:{id:"链接71"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161762",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161762",target:"_blank"}},[s("span",{staticClass:"ne-text"},[t._v(" 派生类构造 ")])])])]),s("td",{attrs:{width:"99"}},[s("p",{staticClass:"ne-p",attrs:{id:"uf2297283"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#W6gu4",href:"#W6gu4"}},[s("span",{staticClass:"ne-text"},[t._v(" T751 ")])])])])]),s("tr",{staticStyle:{height:"33px"}},[s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"uc01014fc"}},[s("span",{staticClass:"ne-text"},[t._v(" LX709 ")])])]),s("td",{attrs:{width:"105"}},[s("p",{staticClass:"ne-p",attrs:{id:"u4df34988"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161763",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161763",target:"_blank"}},[s("span",{staticClass:"ne-text"},[t._v(" 时间的比较 ")])])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u63d572b8"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#f0cmO",href:"#f0cmO"}},[s("span",{staticClass:"ne-text"},[t._v(" T771 ")])])])]),s("td",{attrs:{width:"93"}},[s("p",{staticClass:"ne-p",attrs:{id:"u3ac27b79"}},[s("span",{staticClass:"ne-text"},[t._v(" LX710 ")])])]),s("td",{attrs:{width:"102"}},[s("p",{staticClass:"ne-p",attrs:{id:"u517bb232"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161764",href:"https://www.qingline.net/practice-list/practice?question_bank_id=13997&id=161764",target:"_blank"}},[s("span",{staticClass:"ne-text"},[t._v(" N天以后 ")])])])]),s("td",{attrs:{width:"99"}},[s("p",{staticClass:"ne-p",attrs:{id:"uaa15055b"}},[s("a",{staticClass:"ne-link",attrs:{"data-href":"#f0cmO",href:"#f0cmO"}},[s("span",{staticClass:"ne-text"},[t._v(" T771 ")])])])])])])])])])}],n={mounted(){this.$nextTick((()=>{this.goAnchor(window.location.hash)})),hljs.initHighlightingOnLoad(),hljs.initLineNumbersOnLoad({singleLine:!0})},methods:{goAnchor(t){if(t){console.log(t);let s=document.getElementById(t.replace("#",""));s.scrollIntoView(!0)}}}},c=n,l=a(1001),d=(0,l.Z)(c,e,i,!1,null,null,null),p=d.exports}}]);
//# sourceMappingURL=361.b9121713.js.map